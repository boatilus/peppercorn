package routes

import (
	"log"
	"net/http"
	"time"

	"github.com/boatilus/peppercorn/paths"
	"github.com/boatilus/peppercorn/session"
	"github.com/boatilus/peppercorn/users"
	"github.com/pquerna/otp/totp"
)

// EnterCodePostHandler is the handler for the EnterCode POST route. It accepts a form with the
// `code` value and verifies it against the user's stored TOTP secret. If it matches, it extends
// the user's MFA session and redirects back to the route the user was attempting to access before
// being prompted for his/her code. If the submitted code is empty or invalid, the user is
// redirected to enter his/her code again and a flash message is displayed.
func EnterCodePostHandler(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}

	ctx := r.Context()

	// We'll need both the user data and the session data from the context for this route.
	u := users.FromContext(ctx)
	if u == nil {
		msg := "In EnterCodePostHandler(), could not read user data from request context"
		http.Error(w, msg, http.StatusInternalServerError)
		return
	}

	s := session.FromContext(ctx)
	if s == nil {
		msg := "In EnterCodePostHandler(), could not read session from request context"
		http.Error(w, msg, http.StatusInternalServerError)
		return
	}

	code := r.FormValue("code")
	if code == "" {
		session.AddFlash(s.ID, "Please enter the code generated by your authenticator app")
		http.Redirect(w, r, paths.Get.EnterCode, http.StatusSeeOther)
		return
	}

	log.Printf("routes: validating TOTP code %q for user %q [%q]..", code, u.ID, u.Name)

	// Validate the code submitted against the user's secret.
	if !totp.Validate(code, u.TOTPSecret) {
		session.AddFlash(s.ID, "The code entered was incorrect")
		http.Redirect(w, r, paths.Get.EnterCode, http.StatusSeeOther)
		return
	}

	log.Printf("routes: TOTP code for user %q [%s] successfully validated", u.ID, u.Name)

	// Extend the user's MFA session expiry.
	d := time.Duration(u.GetAuthDuration()) * time.Second
	s.MFAExpiresAt = time.Now().UTC().Add(d)

	if err := session.Update(s); err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}

	http.Redirect(w, r, "/", http.StatusSeeOther)
}
